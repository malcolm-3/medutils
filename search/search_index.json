{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Malcolm3Utils","text":"<p>Documentation: https://malcolm-3.github.io/malcolm3utils</p> <p>Source Code: https://github.com/malcolm-3/malcolm3utils</p> <p>PyPI: https://pypi.org/project/malcolm3utils/</p> <p>Collection of Utility Scripts and Packages</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install malcolm3utils\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>This package provides the following command line tools</p> <ul> <li><code>touch_latest</code></li> <li>This touches a marker file with the timestamp of the most recently changed file under the specified directories</li> <li><code>getcol</code></li> <li>A tool for extracting columns of data by column header name or column id</li> <li><code>merge</code></li> <li>A version of the <code>join</code> command that doesn't require pre-sorting</li> </ul>"},{"location":"#development","title":"Development","text":"<ul> <li>Clone this repository</li> <li>Requirements:</li> <li>Poetry</li> <li>Python 3.9+</li> <li>Create a virtual environment and install the dependencies</li> </ul> <pre><code>poetry install\n</code></pre> <ul> <li>Activate the virtual environment</li> </ul> <pre><code>poetry shell\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<pre><code>pytest\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation is automatically generated from the content of the <code>docs</code> directory and from the docstrings  of the public signatures of the source code. The documentation is updated and published as a Github project page   automatically as part each release.</p>"},{"location":"#releasing","title":"Releasing","text":"<p>Trigger the Draft release workflow (press Run workflow). This will update the changelog &amp; version and create a GitHub release which is in Draft state.</p> <p>Find the draft release from the GitHub releases and publish it. When  a release is published, it'll trigger release workflow which creates PyPI  release and deploys updated documentation.</p>"},{"location":"#pre-commit","title":"Pre-commit","text":"<p>Pre-commit hooks run all the auto-formatters (e.g. <code>black</code>, <code>isort</code>), linters (e.g. <code>mypy</code>, <code>flake8</code>), and other quality  checks to make sure the changeset is in good shape before a commit/push happens.</p> <p>You can install the hooks with (runs for each commit):</p> <pre><code>pre-commit install\n</code></pre> <p>Or if you want them to run only for each push:</p> <pre><code>pre-commit install -t pre-push\n</code></pre> <p>Or if you want e.g. want to run all checks manually for all files:</p> <pre><code>pre-commit run --all-files\n</code></pre> <p>This project was generated using the python-package-cookiecutter template.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#056-2025-06-02","title":"0.5.6 - 2025-06-02","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>updated tests to work on Windows (should fix MacOS also, but not tested)</li> </ul>"},{"location":"changelog/#055-2025-05-31","title":"0.5.5 - 2025-05-31","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>project classifiers</li> </ul>"},{"location":"changelog/#054-2025-05-31","title":"0.5.4 - 2025-05-31","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Switched release.yml back to using PyPI API_TOKEN</li> </ul>"},{"location":"changelog/#053-2025-05-31","title":"0.5.3 - 2025-05-31","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Corrected problem with publication to PyPI</li> </ul>"},{"location":"changelog/#052-2025-05-31","title":"0.5.2 - 2025-05-31","text":""},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>More documentation updates</li> </ul>"},{"location":"changelog/#051-2025-05-31","title":"0.5.1 - 2025-05-31","text":""},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Documentation and action updates to allow publication to PyPI</li> </ul>"},{"location":"changelog/#050-2025-05-31","title":"0.5.0 - 2025-05-31","text":""},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Renamed package to malcolm3utils to avoid conflicts with an existing pypi medutils package.</li> </ul>"},{"location":"changelog/#046-2025-03-25","title":"0.4.6 - 2025-03-25","text":""},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>updated actions to generate token using github app</li> </ul>"},{"location":"changelog/#045-2025-03-20","title":"0.4.5 - 2025-03-20","text":""},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>fixed vulnerabilites identifed by github's dependabot by uprading all dependencies</li> </ul>"},{"location":"changelog/#044-2024-12-19","title":"0.4.4 - 2024-12-19","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li><code>--version</code> option to <code>getcol</code> and <code>touch_latest</code></li> </ul>"},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>improved output message for <code>--version</code> option</li> </ul>"},{"location":"changelog/#043-2024-12-19","title":"0.4.3 - 2024-12-19","text":""},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>updates to workflow to get automatic version updating to work</li> <li><code>src/malcolm3utils/__init__.py</code> was being updated, but not committed.</li> </ul>"},{"location":"changelog/#042-2024-12-19","title":"0.4.2 - 2024-12-19","text":""},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>updates to workflow to get automatic version updating to work]</li> <li>didn't quite fix it</li> </ul>"},{"location":"changelog/#041-2024-12-19","title":"0.4.1 - 2024-12-19","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li><code>--version</code> option to <code>merge</code> command</li> </ul>"},{"location":"changelog/#040-2024-12-18","title":"0.4.0 - 2024-12-18","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li><code>--keep uniq</code> option for <code>merge</code> command</li> <li>keeps only unique values, duplicates are ignored.</li> </ul>"},{"location":"changelog/#031-2024-04-24","title":"0.3.1 - 2024-04-24","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li><code>--ignore</code> flag for <code>merge</code> command</li> <li>specifies columns that will be ignored and not included in the output</li> </ul>"},{"location":"changelog/#030-2024-04-22","title":"0.3.0 - 2024-04-22","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li><code>merge</code></li> <li>my version of join(1) that doesn't require sorting</li> </ul>"},{"location":"changelog/#021-2024-04-20","title":"0.2.1 - 2024-04-20","text":""},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li>added missing 'getcol' entry to pyproject.toml to get getcol script file created</li> </ul>"},{"location":"changelog/#020-2024-04-20","title":"0.2.0 - 2024-04-20","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li><code>getcol</code></li> <li>script to extract columns from a delimited file</li> </ul>"},{"location":"changelog/#011-2024-01-19","title":"0.1.1 - 2024-01-19","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>updated to use cruft and the template https://github.com/collijk/python-package-cookiecutter</li> </ul>"},{"location":"changelog/#010-2024-01-19","title":"0.1.0 - 2024-01-19","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li><code>touch_latest</code></li> <li>script to touch (and create if necessary) a file     with its modification date set to the latest date found in the specified dicrectories</li> </ul>"},{"location":"cli_docs/","title":"CLI documentation","text":""},{"location":"cli_docs/#getcol","title":"getcol","text":"<p>Read the specified file and write out just the specified columns to stdout.</p> <p>The column_spec is a comma separated list of column headers, column indexes (one-based), or column ranges (e.g. 4-6 for columns 4 through 6 inclusive).</p> <p>If no file_to_read is specified, then input is read from stdin.</p> <p>Usage:</p> <pre><code>getcol [OPTIONS] COLUMN_SPEC [FILE_TO_READ]\n</code></pre> <p>Options:</p> <pre><code>  -d, --delimiter TEXT         column delimiter (default=TAB)\n  -o, --output-delimiter TEXT  output column delimiter (default=input\n                               delimiter)\n  --version                    Show the version and exit.\n  --help                       Show this message and exit.\n</code></pre>"},{"location":"cli_docs/#merge","title":"merge","text":"<p>Merge the specified delimited files with column headings, joining entries with the same key field value.</p> <p>The files do not need to be sorted on the key field as with join(1). This does require that all of the data be read into memory. If that is a problem, using the system join(1) command is recommended.</p> <p>Rows will be printed in the order that the unique key values are encountered when reading through the input files.</p> <p>To read from stdin, use '-' as the filename.</p> <p>The output key column will be the first column of the output file and the header will be the header from the first file.</p> <p>If -k is used to specify alternative keys columns for subsequent files, but those files have a column with the same name as the output key column, that will be ignored.</p> <p>Usage:</p> <pre><code>merge [OPTIONS] [FILES_TO_READ]...\n</code></pre> <p>Options:</p> <pre><code>  -v, --verbosity LVL           Either CRITICAL, ERROR, WARNING, INFO or\n                                DEBUG.\n  -d, --delimiter TEXT          column delimiter (default=TAB)\n  -o, --output-delimiter TEXT   output column delimiter (default=input\n                                delimiter)\n  --all-delimiter TEXT          when keep==\"all\" this will be the delimiter\n                                between entries where there are multiple\n                                (default=\";\")\n  -k, --key-column TEXT         comma separated list of key column\n                                identifiers. each new file will use the next\n                                identifier. the last identifier will be used\n                                for all remaining files, so just use \"-k\n                                identifier\" if the identifier is the same for\n                                all files. The identifier can either be the\n                                header string or the one-based column index.\n                                (default=1 (i.e. the first column of each\n                                file))\n  --keep [first|last|uniq|all]  specifies how to handle multiple values for\n                                the same field with the same key\n  -I, --ignore TEXT             comma separated list of column identifiers to\n                                ignore\n  --version                     Show the version and exit.\n  --help                        Show this message and exit.\n</code></pre>"},{"location":"cli_docs/#touch-latest","title":"touch-latest","text":"<p>Find the latest changed date of file under the specified PATHS_TO_CHECK and touch the TOUCH_FILE with that date (creating it if necessary).</p> <p>Files that match ignore patterns will be ignored when locating searching for the file with the latest change date. Patterns that contain slashes either need to be absolute (i.e. start with a slash) or they need to start with an asterisk in order to match anything. So any such pattern that doesn't have either will have an asterisk prepended.</p> <p>Directories which match an ignore pattern will not be traversed. Paths can be specified to ignore only from specific directories, e.g. '/test/.out'.</p> <p>Default ignore globs: '~', '.pyc', '#', '.' '*.OLD' 'OLD'</p> <p>touch_file: file to be touchead with the latest date paths_to_check: paths to search for the latest change date</p> <p>:param touch_file: file to be touchead with the latest date :param paths_to_check: paths to search for the latest change date :param ignore_patterns: glob patterns to ignore :param ignore_pattern_files: files of glob patterns to ignore :param no_default_ignore: if True do not include default glob patterns</p> <p>Usage:</p> <pre><code>touch-latest [OPTIONS] TOUCH_FILE PATHS_TO_CHECK...\n</code></pre> <p>Options:</p> <pre><code>  -i, --ignore TEXT        glob patterns to ignore (likely needs to be quoted,\n                           and can be repeated)\n  -f, --ignore-file PATH   file with glob patterns (one per line) to ignore\n                           (can be repeated)\n  -n, --no-default-ignore  do not use default ignore globs\n  --version                Show the version and exit.\n  --help                   Show this message and exit.\n</code></pre>"}]}